# Author:: Paul Grizzaffi
# Copyright:: Copyright (c) 2011 GameStop, Inc.
# Not for external distribution.

# == Overview
# This class houses and provides finders for a product list generated by
# a search.
# == Usage
#  list_item = @browser.product_list.at(0)
class ImpulseSearchProductList < CommonComponent
  # Returns the product item at the specified index from the list. The item
  # is returned as an ImpulseProductListItem; see it's documentation
  # for additional usage examples.
  # === Parameters:
  # _index_:: zero-based index of the product to be retrieved from the list.
  def at(index)
    return ImpulseSearchProductListItem.new(@tag.at(index), @browser)
  end

  # Returns the number of products in the list.
  def length()
    # If there are no items, return 0 for the length.
    if(!@tag.exists)
      return 0
    end

    return @tag.length
  end
end

# == Overview
# This class houses and provides finders for a product list item.
# == Usage
#  @browser.product_list.at(0).remove_link.click
class ImpulseSearchProductListItem < CommonComponent

  # Returns the item's title link.
  def product_title_link
    $tracer.trace(format_method(__method__))
    return ToolTag.new(
      @tag.find.td.className(create_ats_regex_string("ats-product-title")).find.a,
      format_method(__method__), @browser)
  end

  # Returns the item's image link.
  def product_image_link
    $tracer.trace(format_method(__method__))
    return ToolTag.new(@tag.td.at(0).find.a,format_method( __method__), @browser)
  end

  # Returns the product publisher label.
  def product_publisher_label
      $tracer.trace(format_method(__method__))
      return ToolTag.new(@tag.find.td.className(create_ats_regex_string("ats-product-title")).small.at(0),format_method( __method__), @browser)
  end

  # Returns the product genre label.
  def product_genre_label
      $tracer.trace(format_method(__method__))
      return ToolTag.new(@tag.find.td.className(create_ats_regex_string("ats-product-title")).small.at(1),format_method( __method__), @browser)
  end

end
